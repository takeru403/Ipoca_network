import React, { useState } from "react";
import {
  RadarChart, Radar, PolarGrid,
  PolarAngleAxis, PolarRadiusAxis,
  Tooltip, Legend,
} from "recharts";
import "./App.css";

const App = () => {
  // 認証情報
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState("");
  const [pwd, setPwd] = useState("");

  // 検索 & 可視化
  const [query, setQuery] = useState("");
  const [results, setResults] = useState([]);
  const [radarData, setRadarData] = useState([]);
  const [tenants, setTenants] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // ───────── 認証 ─────────
  const login = async () => {
    try {
      const r = await fetch("/api/login", {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: user, password: pwd }),
      });
      if (!r.ok) throw new Error("ログイン失敗");
      setIsLoggedIn(true);
    } catch (e) {
      alert(e.message);
    }
  };

  const logout = async () => {
    await fetch("/api/logout", { method: "POST", credentials: "include" });
    setIsLoggedIn(false);
    setQuery(""); setResults([]); setRadarData([]);
  };

  // ───────── API 呼び出し ─────────
  const handleSearch = async () => {
    setLoading(true); setError("");
    try {
      const r = await fetch("/api/search", {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query }),
      });
      const data = await r.json();
      if (!r.ok) throw new Error(data.error || "検索失敗");
      setResults(data);
    } catch (e) {
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  const handleFileUpload = async (e) => {
    const f = e.target.files[0];
    if (!f) return;
    const fd = new FormData();
    fd.append("file", f);
    setError("");
    try {
      const r = await fetch("/api/upload-json", {
        method: "POST",
        credentials: "include",
        body: fd,
      });
      const json = await r.json();
      if (!r.ok) throw new Error(json.error || "アップロード失敗");
      setRadarData(json.data); setTenants(json.tenants);
    } catch (e) {
      setError(e.message);
    }
  };

  // ───────── UI ─────────
  if (!isLoggedIn) {
    return (
      <div className="login">
        <h2>ログイン</h2>
        <input value={user} onChange={e => setUser(e.target.value)} placeholder="ユーザー名" />
        <input value={pwd} onChange={e => setPwd(e.target.value)} placeholder="パスワード" type="password" />
        <button onClick={login}>ログイン</button>
      </div>
    );
  }

  return (
    <div className="app">
      <header>
        <h1>スライド検索 & データ可視化</h1>
        <button onClick={logout}>ログアウト</button>
      </header>

      {/* レーダーチャート */}
      <section>
        <h2>📊 レーダーチャート</h2>
        <input type="file" accept=".csv,.xlsx" onChange={handleFileUpload} />
        {radarData.length > 0 && (
          <RadarChart outerRadius={120} width={500} height={400} data={radarData}>
            <PolarGrid />
            <PolarAngleAxis dataKey="metric" />
            <PolarRadiusAxis angle={30} domain={[0, 1]} />
            {tenants.map(t => (
              <Radar key={t} name={t} dataKey={t} stroke="#1f77b4" fill="#1f77b4" fillOpacity={0.2} />
            ))}
            <Tooltip />
            <Legend />
          </RadarChart>
        )}
      </section>

      {/* スライド検索 */}
      <section>

      </section>
    </div>
  );
};

export default App;
